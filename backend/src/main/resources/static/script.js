//Criando objeto que ir√° se conectar com o servidor Web Socket utilizando a URL configurada no BackEnd
const stompClient = new StompJs.Client({
    brokerURL: 'wss://' + window.location.host + '/furia-chat'
});

//Mantendo conex√£o com o servidor e recebendo e organizando qualquer mensagem que ele envie
stompClient.onConnect = (frame) => {
        setConnected(true);
        console.log('Connected: ' + frame);
        stompClient.subscribe('/topics/furia-chat', (message) => {
            updateLiveChat(JSON.parse(message.body).content);
        });
};

//Tratamento para caso ocorra algum erro no processo de conex√£o
stompClient.onWebSocketError = (error) => {
    console.error('Error with websocket', error);
};

//Tratamento para caso o servidor retorne algum erro
stompClient.onStompError = (frame) => {
    console.error('Broker reported error: ' + frame.headers['message']);
    console.error('Additional details: ' + frame.body);
};

//Fun√ß√£o para desabilitar o habilitar os bot√µes de conex√£o, assim como se conectar ou desconectar ao servidor
function setConnected(connected) {
    $("#connect").prop("disabled", connected);
    $("#disconnect").prop("disabled", !connected);
    if (connected) {
        $("#conversation").show();
    } else {
        $("#conversation").hide();
    }
}

//Abrindo conex√£o com o servidor, s√≥ ir√° funcionar se o usu√°rio digitar alguma letra no input de usu√°rio, sen√£o ativa o sweet alert de erro
function connect() {
    const username = $("#user").val().trim();
    if(username === ""){

        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: "Por favor, digite um nome de usu√°rio para se conectar ao CHAT!",
        });
        return;

    }

    stompClient.activate();
}

//Fun√ß√£o para se desconectar do servidor
function disconnect() {
    stompClient.deactivate();
    setConnected(false);
    console.log("Disconnected");
}

//Fun√ß√£o para enviar novas mensagens ao servidor, para enviar o usu√°rio precisar escrever algo no input de novas mensagen e estar conectado,
//caso contr√°rio, ir√° ativar sweet alerts de erro
function sendMessage() {

    const msg = $("#message").val().trim();         //Precisa ter algo escrito na caixa de novas mensagens
    if(msg === ""){

        Swal.fire({
            icon: "error",
            title: "Oops...",
            text: "Por favor, digite uma mensagem para ser exibida no CHAT!",
        }).then(() => {
                $("#send").focus();
        });
            return;
    }

    const username = $("#user").val().trim();       //Precisa haver um nome de usu√°rio
    if(username === ""){

            Swal.fire({
                icon: "error",
                title: "Oops...",
                text: "Para mandar uma mensagem voc√™ precisa se conectar como um usu√°rio!",
            }).then(() => {
                    $("#send").focus();
            });
                return;
    }

    stompClient.publish({                       //Caso esteja tudo certo, ir√° publicar a mensagem no servidor
        destination: "/app/new-message",        //URL para novas mensagens
        body: JSON.stringify({                  //Envia a mensagem em formato JSON, contendo o usu√°rio e a mensagem em si
            'user': $("#user").val(),
            'message': $("#message").val()
        })
    });
    $("#message").val("");
}

$(document).ready(function() {
    $("form").on('submit', (e) => e.preventDefault());  // Configurando as a√ß√µes de casa bot√£o
    $("#connect").click(() => connect());
    $("#disconnect").click(() => disconnect());
    $("#send").click(() => sendMessage());

    //Configura√ß√£o para uso de emojis
    const emojiButton = document.querySelector('#emoji-button');                        //Selecionando bot√£o e alocando local onde ir√° aparecer
    const emojiPickerContainer = document.querySelector('#emoji-picker-container');     //os emojis para serem escolhidos
    const messageInput = document.querySelector('#message');

    if (emojiButton && emojiPickerContainer && messageInput) {
            // Fun√ß√£o para gerar os emojis
        function generateEmojis() {
            const emojis = [                //Emojis dispon√≠veis

                //Games e esports
                "üéÆ","üïπÔ∏è","üí£","üî´","üß®","üéØ","üèπ","üõ°Ô∏è","‚öîÔ∏è","üèÜ","ü•á","üì°","üß†","üó∫Ô∏è","üßç‚Äç‚ôÇ","üéôÔ∏è","üì¢","üî•","üí•","‚õèÔ∏è","üö©","üíÄ", "‚ö∞Ô∏è","ü©∏","üîç","üñ•Ô∏è","‚å®Ô∏è","üñ±Ô∏è","üìà","üÜö","üí¨","üöÄ",

                "‚ù§Ô∏è", "üéâ", "üî•", "üíØ", "‚ú®", "üçï", "‚òï", "üéµ", "‚öΩ", "üéÆ", "üöÄ", "üí°", "‚≠ê", "üåà", "üéÅ", "üéà", "üéÇ",
                // Smileys & Emo√ß√µes
                "üòä", "üòÇ", "üò≠", "üòç", "ü•∞", "üòò", "üòó", "üòô", "ü§©", "ü§î", "ü§®", "üôÑ", "üòí", "üòû", "üòü", "üò†", "üò°", "ü§¨", "ü•∫", "üò•", "üòì", "ü•∂", "ü•µ", "ü•¥", "ü§Ø", "üòá", "ü§†", "üòé", "ü§ì", "ü•≥", "ü§°", "üòà", "üíÄ", "üëª", "üëΩ", "ü§ñ", "üí©", "üôà", "üôâ", "üôä",

                // Pessoas & Corpo
                "üëã", "ü§ö", "üñêÔ∏è", "‚úã", "üññ", "üëå", "ü§è", "ü§û", "‚úåÔ∏è", "ü§ò", "ü§ô", "üëà", "üëâ", "üëÜ", "üñï", "üëá", "‚òùÔ∏è", "üëç", "üëé", "üëè", "üôå", "ü§ù", "üôè", "üí™", "ü¶µ", "ü¶∂", "üëÇ", "üëÉ", "üß†", "ü¶∑", "üëÖ", "üëÑ", "üë∂", "üëß", "üë¶", "üßë", "üë®", "üë©", "üë¥", "üëµ", "üë®‚Äç‚öïÔ∏è", "üë©‚Äç‚öïÔ∏è", "üë®‚Äçüéì", "üë©‚Äçüéì", "üë®‚Äçüè´", "üë©‚Äçüè´", "üë®‚Äçüåæ", "üë©‚Äçüåæ", "üë®‚Äçüç≥", "üë©‚Äçüç≥", "üë®‚Äçüîß", "üë©‚Äçüîß", "üë®‚Äçüè≠", "üë©‚Äçüè≠", "üë®‚Äçüíº", "üë©‚Äçüíº", "üë®‚Äçüíª", "üë©‚Äçüíª", "üë®‚Äçüé§", "üë©‚Äçüé§", "üë®‚Äçüé®", "üë©‚Äçüé®", "üë®‚Äç‚úàÔ∏è", "üë©‚Äç‚úàÔ∏è", "üë®‚ÄçüöÄ", "üë©‚ÄçüöÄ", "üëÆ‚Äç‚ôÇÔ∏è", "üëÆ‚Äç‚ôÄÔ∏è", "üïµÔ∏è‚Äç‚ôÇÔ∏è", "üïµÔ∏è‚Äç‚ôÄÔ∏è", "üíÇ‚Äç‚ôÇÔ∏è", "üíÇ‚Äç‚ôÄÔ∏è", "üë∑‚Äç‚ôÇÔ∏è", "üë∑‚Äç‚ôÄÔ∏è", "ü§¥", "üë∏", "üë≥‚Äç‚ôÇÔ∏è", "üë≥‚Äç‚ôÄÔ∏è", "üë≤", "üßï", "üßî‚Äç‚ôÇÔ∏è", "üßî‚Äç‚ôÄÔ∏è", "üë±‚Äç‚ôÇÔ∏è", "üë±‚Äç‚ôÄÔ∏è", "üë®‚Äçü¶∞", "üë©‚Äçü¶∞", "üë®‚Äçü¶±", "üë©‚Äçü¶±", "üë®‚Äçü¶≥", "üë©‚Äçü¶≥", "üë®‚Äçü¶≤", "üë©‚Äçü¶≤", "üßë‚Äçü§ù‚Äçüßë", "üë®‚Äçüë©‚Äçüë¶", "üë®‚Äçüë©‚Äçüëß", "üë®‚Äçüë©‚Äçüëß‚Äçüë¶", "üë®‚Äçüë©‚Äçüë¶‚Äçüë¶", "üë®‚Äçüë©‚Äçüëß‚Äçüëß", "üë®‚Äçüë®‚Äçüë¶", "üë®‚Äçüë®‚Äçüëß", "üë®‚Äçüë®‚Äçüëß‚Äçüë¶", "üë®‚Äçüë®‚Äçüë¶‚Äçüë¶", "üë®‚Äçüë®‚Äçüëß‚Äçüëß", "üë©‚Äçüë©‚Äçüë¶", "üë©‚Äçüë©‚Äçüëß", "üë©‚Äçüë©‚Äçüëß‚Äçüë¶", "üë©‚Äçüë©‚Äçüë¶‚Äçüë¶", "üë©‚Äçüë©‚Äçüëß‚Äçüëß", "üë®‚Äçüë¶", "üë®‚Äçüëß", "üë©‚Äçüë¶", "üë©‚Äçüëß",

                // Animais & Natureza
                "üê∂", "üê±", "üê≠", "üêπ", "üê∞", "ü¶ä", "üêª", "üêº", "üê®", "üêØ", "ü¶Å", "üêÆ", "üê∑", "üêΩ", "üêî", "ü¶É", "üïäÔ∏è", "üê¶", "üêß", "ü¶â", "ü¶á", "ü¶ã", "üêõ", "üêú", "üêù", "üêû", "ü¶ó", "üï∑Ô∏è", "ü¶Ç", "üê¢", "üêç", "ü¶é", "ü¶ñ", "ü¶ï", "üê≥", "üê¨", "üêü", "üê†", "üê°", "üêô", "üêö", "ü¶Ä", "ü¶û", "ü¶ê", "ü¶ë", "üêê", "üêë", "üê¥", "ü¶í", "üêò", "ü¶è", "ü¶õ", "ü¶ì", "üêí", "ü¶ç", "ü¶ß", "ü¶•", "ü¶¶", "üê∫", "üêï‚Äçü¶∫", "üê©", "üêà‚Äç", "üêá", "üêÄ", "üêÅ", "üêøÔ∏è", "ü¶î", "üêâ", "ü¶ï", "üå¥", "üå≥", "üå≤", "üåµ", "üå±", "üåø", "‚òòÔ∏è", "üçÄ", "üçÅ", "üçÇ", "üçÑ", "üçá", "üçé", "üçä", "üçã", "üçå", "üçâ", "üçì", "üçç", "ü•≠", "ü•ù", "üçÖ", "üå∂Ô∏è", "ü•ï", "ü•¶", "ü•¨", "ü•í", "üåΩ", "ü•î", "üç†", "ü•ú", "üçû", "ü•ê", "ü•ñ", "ü•®", "ü•Ø", "ü•û", "üßá", "üßÄ", "üçñ", "üçó", "ü•©", "ü•ì", "üçî", "üçü", "üçï", "üå≠", "ü•™", "üåÆ", "üåØ", "ü•ô", "üßÜ", "ü•ö", "üç≥", "ü•ò", "üç≤", "ü•£", "ü•ó", "üçø", "üßà", "üßÇ", "ü•´", "üç±", "üçò", "üçô", "üçö", "üçõ", "üçú", "üçù", "üç£", "üç§", "üç•", "ü•Æ", "üç°", "ü•ü", "ü•†", "ü•°", "üç™", "üéÇ", "üç∞", "üßÅ", "ü•ß", "üç´", "üç¨", "üç≠", "üçÆ", "üç©", "ü•†", "üç¶", "üçß", "üç®", "üßâ", "üç∫", "üçª", "ü•Ç", "üç∑", "ü•É", "üç∏", "üçπ", "üßâ", "üçæ", "üç∂", "‚òï", "üçµ", "ü•§","üßÉ", "üßâ", "üßä",

            ]; // Adicione mais emojis conforme necess√°rio


            emojis.forEach(emoji => {      //Selecionando o emoji atrav√©s do click do usu√°rio e incluindo na caixa de novas mensagens
                const emojiElement = document.createElement('span');
                emojiElement.textContent = emoji;
                emojiElement.classList.add('emoji-item');
                emojiElement.addEventListener('click', function() {
                    messageInput.value += emoji;
                    emojiPickerContainer.style.display = 'none'; // Ocultar ap√≥s a sele√ß√£o
            });
                emojiPickerContainer.appendChild(emojiElement);
            });
        }

        generateEmojis(); // Chamar para criar os emojis ao carregar a p√°gina

            // Controlar a visibilidade do seletor ao clicar no bot√£o de emoji
        emojiButton.addEventListener('click', function() {
            emojiPickerContainer.style.display = (emojiPickerContainer.style.display === 'none' || emojiPickerContainer.style.display === '') ? 'block' : 'none';
        });

            // Ocultar o seletor se clicar fora dele (opcional)
        $(document).on('click', function(event) {
            if (!$(event.target).closest('#emoji-button').length && !$(event.target).closest('#emoji-picker-container').length) {
                emojiPickerContainer.style.display = 'none';
            }
        });
    }
});


//Fun√ß√£o respons√°vel por atualizar a √°rea de mensagem com as novas mensagens do servidor WebSocket
function updateLiveChat(message) {
    const livechatDiv = $("#livechat")[0];
    const isScrolledToBottom = livechatDiv.scrollTop + livechatDiv.clientHeight >= livechatDiv.scrollHeight - 5;

    const messageContainer = document.createElement('div');
    messageContainer.classList.add('message-container');

    const messageTextSpan = document.createElement('span');
    messageTextSpan.classList.add('message-text');
    messageTextSpan.textContent = message;

    messageContainer.appendChild(messageTextSpan);

    $("#livechat").prepend(messageContainer);

    if (isScrolledToBottom) {                           //L√≥gica para manter o chat apontando para baixo e o usu√°rio ver as novas mensagens
        requestAnimationFrame(() => {
            $("#livechat").scrollTop($("#livechat")[0].scrollHeight);
        });
    }
}


